#If SIM is enabled, use this
metricPrefix: 'Custom Metrics|Kafka'

#If SIM is not enabled, then use this
#metricPrefix: 'Server|Component:<Component-ID>|Custom Metrics|Kafka'

# To know your Component-ID, Please refer the link
# https://community.appdynamics.com/t5/Knowledge-Base/How-to-troubleshoot-missing-custom-metrics-or-extensions-metrics/ta-p/28695

# Add your Kafka Instances below
servers:
  - host: "${KAFKA_HOST_1}"
    port: "${KAFKA_PORT_1}"
    username: "${KAFKA_USERNAME}"
    password: ""
    encryptedPassword: "old"
    displayName: 'Local Kafka Server'
    useSsl: true # set to true if you're using SSL for this server

  - host: "${KAFKA_HOST_2}"
    port: "${KAFKA_PORT_2}"
    username: ""
    password: ""
    encryptedPassword: ""
    displayName: 'Local Kafka Server2'
    useSsl: false # set to true if you're using SSL for this server


  # Provide the encryption key for the encrypted password
encryptionKey: "${ENCRYPTION_KEY}"

# Configure the following connection section ONLY if:
# the config property [useSsl] is set to true in any of the servers in the 'servers' section
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  Please REMOVE/COMMENT OUT the connection section below if:
#  SSL is not being used for ANY of the Kafka servers listed in the 'servers' section
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# If you are using the connection section,
# any change to the connection section below requires a machine agent restart for the changes to reflect
connection:
  socketTimeout: 3000
  connectTimeout: 1000
  sslProtocols: 'TLSv1.2'
  sslCipherSuites: ''
  sslTrustStorePath: '/opt/appdynamics/kafka.client.truststore.jks' #if [sslTrustStorePath]: '' empty, it defaults to <MachineAgent_Home>/conf/cacerts.jks
  sslTrustStorePassword: 'test1234' # [sslTrustStorePassword: ""] defaults to ''
  sslTrustStoreEncryptedPassword: '' #provide encrypted Password if encryption is needed




# Generate a custom dashboard based on the provided template
customDashboard:
    enabled: true
    dashboardName: "Kafka BTD Dashboard"
    # Update the path to the dashboard file.
    pathToSIMDashboard: "monitors/KafkaMonitor/CustomDashboard_Kafka+BTD+Dashbaord_1550505032301.json"
    #pathToNormalDashboard: "monitors/SampleMonitor/normalDashboard.json"

controllerInfo:
    controllerHost: "controller"
    controllerPort: 8080
    account: "customer1"
    username: "user1"
    password: "welcome"
    encryptedPassword: ""
    encryptionKey: ""
    controllerSslEnabled: false
    enableOrchestration: false
    uniqueHostId: ""
    accountAccessKey: "${APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY}"
    machinePath: ""
    simEnabled: true
    applicationName: ""
    tierName: ""
    nodeName: ""

metricPathReplacements:
  - replace: "Percent"
    replaceWith: "%"
  - replace: "OneMinuteRate"
    replaceWith: "1 min Rate"


# Each Kafka server needs 1 thread each, so please configure this according to the number of servers you are monitoring
# [numberOfThreads] = Number_of_Kafka_Servers_Monitored
numberOfThreads: 10

# The configuration of different metrics from all mbeans exposed by Kafka server
mbeans:
  # Each "objectName" is fully qualified path of the object of the Kafka server
  # For example "kafka.server:type=ReplicaManager,*" will return all objects nested under ReplicaManager type
  # Each of the entries in the "metrics" section is an attribute of the objectName under which it's listed

  - objectName: 'kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions'
    metrics:
      - Value:
          alias: 'UnderReplicatedPartitions'
          multiplier: ''
          delta: false
          aggregationType: 'OBSERVATION'
          timeRollUpType: 'CURRENT'
          clusterRollUpType: 'INDIVIDUAL'

  #    Number of partitions that donâ€™t have an active leader and are hence not writable or readable.
  #  Alert if value is greater than 0.
  - objectName: 'kafka.controller:type=KafkaController,name=OfflinePartitionsCount'
    metrics:
      - Value:
          alias: 'Value'
          multiplier: ''
          delta: false
          aggregationType: 'OBSERVATION'
          timeRollUpType: 'CURRENT'
          clusterRollUpType: 'INDIVIDUAL'

  #    Number of active controllers in the cluster.
  #  Alert if the aggregated sum across all brokers in the cluster is anything other than 1,
  #  because there should be exactly one controller per cluster.
  - objectName: 'kafka.controller:type=KafkaController,name=ActiveControllerCount'
    metrics:
      - Value:
          alias: 'Value'
          multiplier: ''
          delta: false
          aggregationType: 'OBSERVATION'
          timeRollUpType: 'CURRENT'
          clusterRollUpType: 'INDIVIDUAL'

  # Aggregate incoming byte rate.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=BytesInPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  # Aggregate incoming byte rate.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=BytesOutPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  # Request rate.
  - objectName: 'kafka.network:type=RequestMetrics,name=RequestsPerSec,request={Produce|FetchConsumer|FetchFollower}'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  # Produce request rate.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=TotalProduceRequestsPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #     Fetch request rate.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=TotalFetchRequestsPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #     Produce request rate for requests that failed.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=FailedProduceRequestsPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #    Fetch request rate for requests that failed.
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=FailedFetchRequestsPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #     Number of partitions on this broker. This should be mostly even across all brokers.
  - objectName: 'kafka.server:type=ReplicaManager,name=PartitionCount'
    metrics:
      - Value:
          alias: 'Value'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

#      Average fraction of time the request handler threads are idle.
#     Values are between 0 (all resources are used) and 100 (all resources are available)
  - objectName: 'kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: '100'
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #     Average fraction of time the network processor threads are idle.
  #  Values are between 0 (all resources are used) and 100 (all resources are available)
  - objectName: 'kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent'
    metrics:
      - Value:
          alias: 'Value'
          multiplier: '100'
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #   Size of the request queue. A congested request queue will not be able to process incoming or outgoing requests
  - objectName: 'kafka.network:type=RequestChannel,name=RequestQueueSize'
    metrics:
      - Value:
          alias: 'Value'
          multiplier: ''
          delta: false
          aggregationType: 'OBSERVATION'
          timeRollUpType: 'CURRENT'
          clusterRollUpType: 'INDIVIDUAL'

  #   The ZooKeeper session has expired. When a session expires, we can have leader changes and even a new controller.
  #  It is important to keep an eye on the number of such events across a Kafka cluster and if the overall number is high
  - objectName: 'kafka.server:type=SessionExpireListener,name=ZooKeeperExpiresPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'OBSERVATION'
          timeRollUpType: 'CURRENT'
          clusterRollUpType: 'INDIVIDUAL'

  #   Metric Per Topic
  - objectName: 'kafka.server:type=BrokerTopicMetrics,name=*,topic=*'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #    When a broker is brought up after a failure, it starts catching up by reading from the leader.
  #    Once it is caught up, it gets added back to the ISR.
  - objectName: 'kafka.server:type=ReplicaManager,name=IsrExpandsPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #    If a broker goes down, ISR for some of the partitions will shrink.
  #  When that broker is up again, ISR will be expanded once the replicas are fully caught up.
  #  Other than that, the expected value for both ISR shrink rate and expansion rate is 0.
  - objectName: 'kafka.server:type=ReplicaManager,name=IsrShrinksPerSec'
    metrics:
      - OneMinuteRate:
          alias: 'OneMinuteRate'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

  #   JVM Metrics
  - objectName: 'java.lang:type=Memory'
    metrics:
      - HeapMemoryUsage.committed:
          alias: 'Heap Memory Usage | Committed (bytes)'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

      - HeapMemoryUsage.max:
          alias: 'Heap Memory Usage | Max (bytes)'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

      - HeapMemoryUsage.used:
          alias: 'Heap Memory Usage | Used (bytes)'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'

      - NonHeapMemoryUsage.committed:
          alias: 'Non Heap Memory Usage | Committed (bytes)'
          multiplier: ''
          delta: false
          aggregationType: 'AVERAGE'
          timeRollUpType: 'AVERAGE'
          clusterRollUpType: 'INDIVIDUAL'
